@page "/learnBlazor/lifecycle"
@rendermode InteractiveServer
@using System.Threading

<PageTitle>Blazor Lifecycle</PageTitle>
<h1>Blazor Lifecycle</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary mb-3" @onclick="IncrementCount">Click me!</button><br/>
<button class="btn btn-primary mb-3" @onclick="StartCountDown">Start Countdown</button>
<button class="btn btn-danger mb-3" @onclick="ResetTimer">Reset Timer</button>
<p>@TimeCount</p>
<div class="border">
    <LifecycleChild CountValue="@currentCount"></LifecycleChild>
</div>

<hr/>
@foreach (var item in EventType)
{
    @item
    <hr/>
}

@code {
    private int currentCount = 0;
    private Timer timer;
    private int TimeCount { get; set; } = 5;

    List<string> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync called");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add("OnAfterRender called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender called");
        return true;
    }

    void StartCountDown()
    { 
        timer = new Timer(TimeCallback, null, 1000, 1000);
    }

    void TimeCallback(object state)
    {
        if (TimeCount > 0)
        {
            TimeCount--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            timer.Dispose();
            InvokeAsync(StateHasChanged);
        }
    }

    void ResetTimer()
    {
        TimeCount = 5;
        timer?.Dispose();
    }
}